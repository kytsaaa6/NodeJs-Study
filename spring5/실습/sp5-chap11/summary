4-3. MVC 1 : 요청 매핑, 커맨드 객체, 리다이렉트

	 1) 요청 매핑 애노테이션을 이용한 경로 매핑
	 - 컨트롤러 클래스는 요청 매핑 애노테이션을 사용해서 메서드가 처리할 요청 경로를 지정
	 - 요청 매핑 애노테이션 : @RequestMapping, @GetMapping, @PostMapping 등
	 - @RequestMapping : 각 메서드에 공통되는 경로를 설정
	   ex) @Controller
	   	   @RequestMapping("/register")
	   	   public class RegistController {
	   	       @RequestMapping("/step1")         // 공통 경로를 제외한 나머지 경로
	   	       //@RequestMapping(value="/step1", method=Request.POST) 전송 방식+경로 지정
	   	       public String handleStep1() {}
	   	   }
	   	   => /register/step1 -> handleStep1()
	 - @GetMapping, @PostMapping : 전송 방식+경로 지정, 스프링 4.3 버전부터 추가
	 
	 2) 요청 파라미터 접근
	 - HttpServletRequest, @RequestParam
	 - @RequestParam 속성
	 	- value : HTTP 요청 파라미터의 이름을 지정
	 	- required : 필수 여부를 지정
	 	- defaultValue : 값이 없을 때 사용할 값을 지정
	 	
	 3) 리다이렉트 처리
	 - 주로 잘못된 전송 방식으로 요청이 왔을 때 에러 화면보다 알맞은 경로로 리다이렉트
	 - redirect:경로
	 
	 4) 커맨트 객체를 이용해서 요청 파라미터 사용
	 - 요청 파라미터 개수가 증가할 때 메서드의 파라미터 길이가 길어져 불편함
	 - 스프링 MVC는 메서드에 전달할 객체를 생성하고 그 객체의 세터 메서드를 이용해서 일치하는 요청 파라미터의 값을 전달
	 
	 5) 뷰 JSP 코드에서 커맨드 객체 사용
	 - 스프링 MVC는 커맨드 객체의(첫글자를 소문자) 클래스 이름과 동일한 속성 이름을 사용해서 뷰에 전달
	   ex) ${registerRequest.name}님
	   
	 6) 커맨드 객체 : 중첩 | 콜렉션 프로퍼티
	 - HTTP 요청 파라미터 이름이 "프로퍼티이름[인덱스]" 형식이면 List 타입 프로퍼티의 값 목록으로 처리
	 - HTTP 요청 파라미터 이름이 "프로퍼티이름.프로퍼티이름" 형식이면 중첩 프로퍼티 값을 처리