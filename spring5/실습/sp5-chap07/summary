2-1. AOP 프로그래밍
	 : 여러 객체의 공통으로 적용할 수 있는 기능을 분리해서 재사용성을 높여주는 프로그래밍 기법
	 - 핵심 기능과 공통 기능의 구현을 분리함으로써 핵심 기능을 구현한 코드의 수정 없이 공통 기능을 적용할 수 있음
	 
	 1) AOP 방식
	  (1) 컴파일 시점에 코드에 공통 기능을 삽입하는 방법(AOP 전용 도구 사용)
	  (2) 클래스 로딩 시점에 바이트 코드에 공통 기능을 삽입하는 방법(AOP 전용 도구 사용)
	  (3) 런타임에 프록시 객체를 생성해서 공통 기능을 삽입하는 방법(스프링이 제공)
	      * 프록시 객체 : 핵심 기능의 실행은 다른 객체에 위임하고 부가적인 기능을 제공하는 객체
	 	    	    , 여러 객체에 공통으로 적용할 수 있는 기능을 구현
	      - 스프링 AOP는 프록시 객체를 자동으로 만들어줌
	      - 공통 기능을 구현한 클래스만 알맞게 구현
	 2) AOP 주요 용어
	 - Advice : 언제 공통 관심 기능을 핵심 로직에 적용할 지 를 정의(ex. 메서드를 호출하기 전(언제)에 트랜잭션 시작(공통기능))
	 - Joinpoint : Advice를 적용 가능한 지점을 의미
	 - Pointcut : Joinpoint의 부분집합으로서 실제 advice가 적용되는 Joinpoiont를 나타냄
	 - Weaving : Advice를 핵심 로직 코드에 적용하는 것
	 - Aspect : 여러 객체에 공통으로 적용되는 기능(ex. 트랜잭션, 보안)
	 
	 3) Advice의 종류
	 - Around Advice 주로 사용
	   : 대상 객체의 메서드 실행 전, 후 또는 익셉션 발생 시점에 공통 기능을 실행하는데 사용
	   
	 4) AOP 구현 방법
	 - Aspect로 사용할 공통 기능 클래스에 @Aspect 애노테이션을 붙인다.
	 - @Pointcut 애노테이션으로 공통 기능을 적용할 Pointcut을 정의한다.
	 - 공통 기능을 구현한 메서드에 @Around 애노테이션을 적용한다.
	 - @Aspect 애노테이션을 붙인 클래스를 공통 기능으로 적용하려면 설정 클래스에 @EnableAspectJAutoProxy
	 - 이 애노테이션을 추가하면 스프링은 @Aspect 애노테이션이 붙은 빈 객체를 찾아서 빈 객체의 @Pointcut 설정과
	   @Around 설정을 사용한다.
	   
	   
	   